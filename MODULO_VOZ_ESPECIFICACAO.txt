ESPECIFICA√á√ÉO COMPLETA DO M√ìDULO DE VOZ - SISTEMA DE AGENDA ELECTRON
========================================================================

CONTEXTO DO PROJETO:
O Sistema de Agenda √© uma aplica√ß√£o Electron completa para gerenciamento de tarefas e projetos com sincroniza√ß√£o autom√°tica entre OneDrive e Google Drive. O m√≥dulo de voz √© uma funcionalidade adicional que permite intera√ß√£o por comando de voz.

ESTADO ATUAL DO M√ìDULO DE VOZ:
===============================

LOCALIZA√á√ÉO NO C√ìDIGO:
- Arquivo: app.js (linhas 1243-1354)
- Fun√ß√£o principal: setupVoiceAssistant()
- Bot√£o na interface: ID "voice-btn" (presente no HTML)
- API endpoint preparada: POST /api/voice/assist (n√£o implementada no servidor ainda)

IMPLEMENTA√á√ÉO ATUAL (FRONTEND):

1. CONFIGURA√á√ÉO INICIAL:
```javascript
function setupVoiceAssistant() {
    const btn = document.getElementById('voice-btn');
    if (!btn) return;

    btn.addEventListener('mousedown', startRecording);
    btn.addEventListener('touchstart', startRecording);
    btn.addEventListener('mouseup', stopRecordingAndSend);
    btn.addEventListener('mouseleave', handleMouseLeaveStop);
    btn.addEventListener('touchend', stopRecordingAndSend);
}
```

2. GRAVA√á√ÉO DE √ÅUDIO:
- Usa navigator.mediaDevices.getUserMedia({ audio: true })
- Formato: MediaRecorder com mimeType 'audio/webm'
- Controle: Pressionar e manter para gravar, soltar para enviar
- Estados visuais: üé§ (normal), üõë (gravando), ‚è≥ (processando)

3. PROCESSAMENTO:
- Converte √°udio para base64
- Envia para API POST /api/voice/assist
- Espera resposta com transcript e √°udio de resposta
- Reproduz √°udio de resposta automaticamente

4. INTERFACE VISUAL:
- Bot√£o com feedback visual durante estados
- Cores: vermelho (gravando), amarelo (processando), normal (parado)
- Tooltips informativos em cada estado

ESTRUTURA ATUAL NO HTML:
=========================

LOCALIZA√á√ÉO DO BOT√ÉO:
O bot√£o de voz est√° integrado na interface principal, provavelmente na topbar ou sidebar (precisa verificar exato local no index.html).

ONDE O M√ìDULO SE INTEGRA NO PROJETO:
====================================

1. INICIALIZA√á√ÉO:
- Chamado em app.js linha 90: setupVoiceAssistant()
- Executado ap√≥s carregamento completo do DOM
- Tratamento de erro: try/catch que apenas avisa se falhar

2. DEPEND√äNCIAS ATUAIS:
- MediaRecorder API (suporte do navegador)
- Fetch API para comunica√ß√£o com servidor
- Audio API para reproduzir respostas
- FileReader para convers√£o base64

3. INTEGRA√á√ÉO COM O SISTEMA:
- Acesso √†s vari√°veis globais: tasks, projects, projectTasks
- Potencial para criar/modificar tarefas por voz
- Potencial para consultar dados do calend√°rio
- Acesso ao API_URL para comunica√ß√£o

O QUE PRECISA SER IMPLEMENTADO (BACKEND):
==========================================

1. ROTA NO SERVIDOR (server.js):
```javascript
app.post('/api/voice/assist', async (req, res) => {
    // Implementar aqui:
    // - Receber √°udio base64
    // - Converter para formato adequado
    // - Enviar para servi√ßo de STT (Speech-to-Text)
    // - Processar comando reconhecido
    // - Gerar resposta inteligente
    // - Converter resposta para √°udio (TTS)
    // - Retornar JSON com transcript e √°udio
});
```

2. ESTRUTURA ESPERADA DA REQUISI√á√ÉO:
```json
{
    "audio": "base64_encoded_audio_data",
    "mimeType": "audio/webm",
    "history": [],
    "systemPrompt": null
}
```

3. ESTRUTURA ESPERADA DA RESPOSTA:
```json
{
    "transcript": "texto reconhecido do usu√°rio",
    "replyText": "resposta textual do assistente",
    "audio": "base64_audio_resposta",
    "mimeType": "audio/mpeg"
}
```

FUNCIONALIDADES QUE O M√ìDULO DE VOZ DEVE SUPORTAR:
===================================================

1. COMANDOS DE CONSULTA:
- "Quais s√£o minhas tarefas de hoje?"
- "Tenho algum projeto com prazo pr√≥ximo?"
- "Mostre minha agenda desta semana"
- "Quantas tarefas pendentes eu tenho?"

2. COMANDOS DE CRIA√á√ÉO:
- "Criar uma tarefa para amanh√£ √†s 14h"
- "Adicionar reuni√£o para sexta-feira"
- "Lembrar de comprar leite hoje"
- "Novo projeto com prazo para o m√™s que vem"

3. COMANDOS DE MODIFICA√á√ÉO:
- "Marcar tarefa X como conclu√≠da"
- "Mover tarefa Y para amanh√£"
- "Alterar prioridade da tarefa Z para alta"
- "Cancelar reuni√£o de ter√ßa-feira"

4. COMANDOS DE NAVEGA√á√ÉO:
- "Abrir calend√°rio"
- "Mostrar dashboard"
- "Ir para projetos"
- "Ver tarefas pendentes"

DADOS DISPON√çVEIS PARA O ASSISTENTE:
====================================

VARI√ÅVEIS GLOBAIS ACESS√çVEIS:
- tasks[] - Array com todas as tarefas
- projects[] - Array com todos os projetos
- projectTasks[] - Array com tarefas de projetos
- recurringTasks[] - Array com tarefas recorrentes
- currentFilter - Filtro atual das tarefas
- currentDate - Data atual
- calendarDate - Data do calend√°rio sendo visualizada

FUN√á√ïES DISPON√çVEIS PARA AUTOMA√á√ÉO:
- saveTask(task) - Criar nova tarefa
- updateTask(id, updates) - Atualizar tarefa existente
- saveProject(project) - Criar novo projeto
- updateProject(projectData) - Atualizar projeto
- loadTasks() - Recarregar tarefas
- loadProjects() - Recarregar projetos
- showView(viewName) - Navegar entre telas
- renderCalendar() - Atualizar calend√°rio

TECNOLOGIAS SUGERIDAS PARA IMPLEMENTA√á√ÉO:
=========================================

1. SPEECH-TO-TEXT (STT):
- Google Cloud Speech-to-Text API
- Azure Cognitive Services Speech
- AWS Transcribe
- OpenAI Whisper (local ou API)
- Web Speech API (limitado mas gratuito)

2. PROCESSAMENTO DE LINGUAGEM NATURAL:
- OpenAI GPT-4 para entender inten√ß√µes
- Google Dialogflow
- Microsoft LUIS
- Processamento local com bibliotecas NLP

3. TEXT-TO-SPEECH (TTS):
- Google Cloud Text-to-Speech
- Azure Cognitive Services Speech
- AWS Polly
- OpenAI TTS
- Web Speech API (speechSynthesis)

4. BIBLIOTECAS √öTEIS:
- multer (upload de arquivos)
- fluent-ffmpeg (convers√£o de √°udio)
- node-wav (manipula√ß√£o WAV)
- compromise (NLP em JavaScript)

FLUXO COMPLETO PROPOSTO:
========================

1. USU√ÅRIO PRESSIONA BOT√ÉO DE VOZ
2. FRONTEND GRAVA √ÅUDIO (j√° implementado)
3. FRONTEND CONVERTE PARA BASE64 (j√° implementado)
4. FRONTEND ENVIA PARA /api/voice/assist (j√° implementado)

5. BACKEND RECEBE √ÅUDIO (precisa implementar)
6. BACKEND CONVERTE √ÅUDIO PARA FORMATO ADEQUADO (implementar)
7. BACKEND ENVIA PARA SERVI√áO STT (implementar)
8. BACKEND RECEBE TRANSCRIPT (implementar)

9. BACKEND ANALISA INTEN√á√ÉO DO COMANDO (implementar)
10. BACKEND EXECUTA A√á√ÉO CORRESPONDENTE (implementar):
    - Consulta dados existentes
    - Cria/modifica tarefas ou projetos
    - Prepara resposta adequada

11. BACKEND GERA RESPOSTA TEXTUAL (implementar)
12. BACKEND CONVERTE RESPOSTA PARA √ÅUDIO (TTS) (implementar)
13. BACKEND RETORNA JSON COM DADOS (implementar)

14. FRONTEND RECEBE RESPOSTA (j√° implementado)
15. FRONTEND REPRODUZ √ÅUDIO (j√° implementado)
16. FRONTEND ATUALIZA INTERFACE SE NECESS√ÅRIO (pode precisar implementar)

EXEMPLOS DE IMPLEMENTA√á√ÉO NECESS√ÅRIA:
=====================================

1. PARSER DE COMANDOS:
```javascript
function parseVoiceCommand(transcript) {
    const command = transcript.toLowerCase();

    if (command.includes('criar tarefa') || command.includes('nova tarefa')) {
        return { action: 'create_task', data: extractTaskData(transcript) };
    }

    if (command.includes('tarefas de hoje')) {
        return { action: 'list_today_tasks', data: {} };
    }

    // ... mais comandos
}
```

2. EXECUTOR DE A√á√ïES:
```javascript
async function executeVoiceAction(action, data) {
    switch(action) {
        case 'create_task':
            return await createTaskFromVoice(data);
        case 'list_today_tasks':
            return await getTodayTasks();
        // ... mais a√ß√µes
    }
}
```

CONSIDERA√á√ïES T√âCNICAS:
=======================

1. FORMATO DE √ÅUDIO:
- Frontend grava em webm
- Pode precisar converter para wav/mp3 para APIs
- Considerar compress√£o para reduzir dados

2. LAT√äNCIA:
- STT pode demorar 2-5 segundos
- TTS adiciona mais 1-3 segundos
- Interface deve mostrar progresso

3. CUSTO:
- APIs comerciais cobram por minuto de √°udio
- Considerar limites de uso
- Implementar caching quando poss√≠vel

4. PRIVACIDADE:
- √Åudio enviado para servi√ßos externos
- Considerar implementa√ß√£o local se sens√≠vel
- Informar usu√°rio sobre envio de dados

5. TRATAMENTO DE ERROS:
- Falha na conex√£o de internet
- √Åudio inaud√≠vel ou muito baixo
- Comandos n√£o reconhecidos
- Falha nos servi√ßos externos

ESTRUTURA DE ARQUIVOS SUGERIDA:
===============================

voice/
‚îú‚îÄ‚îÄ voice-processor.js     - Processamento principal
‚îú‚îÄ‚îÄ stt-service.js         - Integra√ß√£o Speech-to-Text
‚îú‚îÄ‚îÄ tts-service.js         - Integra√ß√£o Text-to-Speech
‚îú‚îÄ‚îÄ command-parser.js      - An√°lise de comandos
‚îú‚îÄ‚îÄ action-executor.js     - Execu√ß√£o de a√ß√µes
‚îî‚îÄ‚îÄ audio-converter.js     - Convers√£o de formatos

PR√ìXIMOS PASSOS PARA IMPLEMENTA√á√ÉO:
===================================

1. IMPLEMENTAR ROTA B√ÅSICA EM server.js
2. ESCOLHER SERVI√áOS STT/TTS (recomendo OpenAI para come√ßar)
3. IMPLEMENTAR CONVERS√ÉO DE √ÅUDIO
4. CRIAR PARSER B√ÅSICO DE COMANDOS
5. IMPLEMENTAR A√á√ïES SIMPLES (consultas primeiro)
6. ADICIONAR CRIA√á√ÉO/MODIFICA√á√ÉO DE DADOS
7. IMPLEMENTAR TTS PARA RESPOSTAS
8. ADICIONAR TRATAMENTO DE ERROS
9. OTIMIZAR PERFORMANCE E UX
10. TESTES EXTENSIVOS COM USU√ÅRIOS REAIS

ESTADO ATUAL: 40% IMPLEMENTADO (Frontend pronto, Backend necess√°rio)