'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On


Namespace My

    'NOTE: This file is auto-generated; do not modify it directly.  To make changes,
    ' or if you encounter build errors in this file, go to the Project Designer
    ' (go to Project Properties or double-click the My Project node in
    ' Solution Explorer), and make changes on the Application tab.
    '
    Partial Friend Class MyApplication

        <Global.System.Diagnostics.DebuggerStepThroughAttribute()>
        Public Sub New()
            MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)
            Me.IsSingleInstance = True
            Me.EnableVisualStyles = True
            Me.SaveMySettingsOnExit = True
            Me.ShutdownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterMainFormCloses
        End Sub

        <Global.System.Diagnostics.DebuggerStepThroughAttribute()>
        Protected Overrides Sub OnCreateMainForm()
            Me.MainForm = My.Forms.MainForm
        End Sub

        <Global.System.Diagnostics.DebuggerStepThroughAttribute()>
        Protected Overrides Function OnStartup(ByVal eventArgs As Microsoft.VisualBasic.ApplicationServices.StartupEventArgs) As Boolean
            ' Enable Windows 10/11 DPI awareness
            Try
                If Environment.OSVersion.Version.Major >= 6 Then
                    SetProcessDPIAware()
                End If
            Catch ex As Exception
                ' Ignore DPI awareness errors on older systems
            End Try

            ' Initialize application logging
            Try
                Dim logPath As String = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "ARIA_System", "Logs")
                If Not Directory.Exists(logPath) Then
                    Directory.CreateDirectory(logPath)
                End If

                ' Set up global exception handling
                AddHandler AppDomain.CurrentDomain.UnhandledException, AddressOf OnUnhandledException
                AddHandler Application.ThreadException, AddressOf OnThreadException

            Catch ex As Exception
                ' Handle initialization errors
                MessageBox.Show($"Error during application startup: {ex.Message}", "Startup Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
            End Try

            Return MyBase.OnStartup(eventArgs)
        End Function

        <Global.System.Diagnostics.DebuggerStepThroughAttribute()>
        Protected Overrides Sub OnShutdown()
            Try
                ' Perform cleanup operations
                SaveApplicationSettings()
                CleanupResources()
            Catch ex As Exception
                ' Handle shutdown errors gracefully
            End Try

            MyBase.OnShutdown()
        End Sub

        Private Sub OnUnhandledException(sender As Object, e As UnhandledExceptionEventArgs)
            Try
                Dim ex As Exception = DirectCast(e.ExceptionObject, Exception)
                LogException(ex, "Unhandled Exception")

                If Not e.IsTerminating Then
                    MessageBox.Show($"An unexpected error occurred: {ex.Message}", "Application Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
                End If
            Catch
                ' Critical error handling
            End Try
        End Sub

        Private Sub OnThreadException(sender As Object, e As Threading.ThreadExceptionEventArgs)
            Try
                LogException(e.Exception, "Thread Exception")
                MessageBox.Show($"A thread error occurred: {e.Exception.Message}", "Thread Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Catch
                ' Critical error handling
            End Try
        End Sub

        Private Sub LogException(ex As Exception, category As String)
            Try
                Dim logPath As String = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "ARIA_System", "Logs", $"error_{DateTime.Now:yyyyMMdd}.log")
                Dim logEntry As String = $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {category}: {ex.Message}{Environment.NewLine}{ex.StackTrace}{Environment.NewLine}{Environment.NewLine}"
                File.AppendAllText(logPath, logEntry)
            Catch
                ' Unable to log - fail silently
            End Try
        End Sub

        Private Sub SaveApplicationSettings()
            Try
                My.Settings.Save()
            Catch ex As Exception
                ' Handle settings save errors
            End Try
        End Sub

        Private Sub CleanupResources()
            Try
                ' Cleanup any application-wide resources
                GC.Collect()
                GC.WaitForPendingFinalizers()
            Catch ex As Exception
                ' Handle cleanup errors
            End Try
        End Sub

        ' Windows API for DPI awareness
        <System.Runtime.InteropServices.DllImport("user32.dll", SetLastError:=True)>
        Private Shared Function SetProcessDPIAware() As Boolean
        End Function

    End Class

End Namespace